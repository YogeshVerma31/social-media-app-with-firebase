// Generated by view binder compiler. Do not edit!
package com.tennine.app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tennine.app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityNewcredentialsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button button5;

  @NonNull
  public final EditText editTextTextPassword4;

  @NonNull
  public final EditText editTextTextPassword5;

  @NonNull
  public final ImageView imageView4;

  @NonNull
  public final TextView textView30;

  @NonNull
  public final TextView textView31;

  @NonNull
  public final TextView textView32;

  private ActivityNewcredentialsBinding(@NonNull ConstraintLayout rootView, @NonNull Button button5,
      @NonNull EditText editTextTextPassword4, @NonNull EditText editTextTextPassword5,
      @NonNull ImageView imageView4, @NonNull TextView textView30, @NonNull TextView textView31,
      @NonNull TextView textView32) {
    this.rootView = rootView;
    this.button5 = button5;
    this.editTextTextPassword4 = editTextTextPassword4;
    this.editTextTextPassword5 = editTextTextPassword5;
    this.imageView4 = imageView4;
    this.textView30 = textView30;
    this.textView31 = textView31;
    this.textView32 = textView32;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityNewcredentialsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityNewcredentialsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_newcredentials, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityNewcredentialsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button5;
      Button button5 = ViewBindings.findChildViewById(rootView, id);
      if (button5 == null) {
        break missingId;
      }

      id = R.id.editTextTextPassword4;
      EditText editTextTextPassword4 = ViewBindings.findChildViewById(rootView, id);
      if (editTextTextPassword4 == null) {
        break missingId;
      }

      id = R.id.editTextTextPassword5;
      EditText editTextTextPassword5 = ViewBindings.findChildViewById(rootView, id);
      if (editTextTextPassword5 == null) {
        break missingId;
      }

      id = R.id.imageView4;
      ImageView imageView4 = ViewBindings.findChildViewById(rootView, id);
      if (imageView4 == null) {
        break missingId;
      }

      id = R.id.textView30;
      TextView textView30 = ViewBindings.findChildViewById(rootView, id);
      if (textView30 == null) {
        break missingId;
      }

      id = R.id.textView31;
      TextView textView31 = ViewBindings.findChildViewById(rootView, id);
      if (textView31 == null) {
        break missingId;
      }

      id = R.id.textView32;
      TextView textView32 = ViewBindings.findChildViewById(rootView, id);
      if (textView32 == null) {
        break missingId;
      }

      return new ActivityNewcredentialsBinding((ConstraintLayout) rootView, button5,
          editTextTextPassword4, editTextTextPassword5, imageView4, textView30, textView31,
          textView32);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
